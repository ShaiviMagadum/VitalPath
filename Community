import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Avatar } from "@/components/ui/avatar";
import { 
  Users, 
  Plus, 
  Heart,
  MessageCircle,
  Trophy,
  TrendingUp,
  Camera,
  Sparkles,
  Award,
  Target
} from "lucide-react";
import { format } from "date-fns";

export default function Community() {
  const [user, setUser] = useState(null);
  const [showPostForm, setShowPostForm] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState("all");
  const queryClient = useQueryClient();

  const [postData, setPostData] = useState({
    content: "",
    post_type: "milestone",
    tags: []
  });

  useEffect(() => {
    const loadUser = async () => {
      const userData = await base44.auth.me();
      setUser(userData);
    };
    loadUser();
  }, []);

  const { data: posts = [] } = useQuery({
    queryKey: ["communityPosts", selectedFilter],
    queryFn: async () => {
      if (selectedFilter === "all") {
        return await base44.entities.CommunityPost.list("-created_date", 50);
      }
      return await base44.entities.CommunityPost.filter({ post_type: selectedFilter }, "-created_date", 50);
    },
  });

  const { data: challenges = [] } = useQuery({
    queryKey: ["challenges"],
    queryFn: async () => {
      return await base44.entities.Challenge.filter({ is_active: true }, "-created_date", 10);
    },
  });

  const { data: topMembers = [] } = useQuery({
    queryKey: ["topMembers"],
    queryFn: async () => {
      const allPosts = await base44.entities.CommunityPost.list("-likes_count", 10);
      const userCounts = {};
      allPosts.forEach(post => {
        userCounts[post.author_name] = (userCounts[post.author_name] || 0) + post.likes_count;
      });
      return Object.entries(userCounts)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([name, likes]) => ({ name, likes }));
    },
  });

  const createPostMutation = useMutation({
    mutationFn: async (post) => {
      return await base44.entities.CommunityPost.create({
        ...post,
        user_email: user.email,
        author_name: user.full_name || user.email.split("@")[0],
        likes_count: 0,
        comments_count: 0
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["communityPosts"] });
      setShowPostForm(false);
      setPostData({
        content: "",
        post_type: "milestone",
        tags: []
      });
    },
  });

  const likePostMutation = useMutation({
    mutationFn: async (postId) => {
      const post = posts.find(p => p.id === postId);
      return await base44.entities.CommunityPost.update(postId, {
        likes_count: post.likes_count + 1
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["communityPosts"] });
    },
  });

  const postTypes = [
    { value: "milestone", label: "Milestone", icon: "🏆", color: "bg-yellow-100 text-yellow-800" },
    { value: "recipe", label: "Recipe", icon: "🍽️", color: "bg-green-100 text-green-800" },
    { value: "tip", label: "Tip", icon: "💡", color: "bg-blue-100 text-blue-800" },
    { value: "question", label: "Question", icon: "❓", color: "bg-purple-100 text-purple-800" },
    { value: "motivation", label: "Motivation", icon: "💪", color: "bg-orange-100 text-orange-800" },
    { value: "progress_photo", label: "Progress", icon: "📸", color: "bg-pink-100 text-pink-800" }
  ];

  const getPostTypeInfo = (type) => {
    return postTypes.find(pt => pt.value === type) || postTypes[0];
  };

  return (
    <div className="p-4 md:p-8 space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900">Community</h1>
          <p className="text-slate-500 mt-1">Connect, share, and inspire each other</p>
        </div>
        <Button
          onClick={() => setShowPostForm(!showPostForm)}
          className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700"
        >
          <Plus className="w-5 h-5 mr-2" />
          Share Post
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Feed */}
        <div className="lg:col-span-2 space-y-6">
          {/* Post Form */}
          {showPostForm && (
            <Card className="border-none shadow-xl">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="w-5 h-5 text-purple-600" />
                  Share with Community
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Post Type</label>
                  <div className="flex flex-wrap gap-2">
                    {postTypes.map((type) => (
                      <button
                        key={type.value}
                        onClick={() => setPostData({ ...postData, post_type: type.value })}
                        className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                          postData.post_type === type.value
                            ? type.color + " border-2 border-current"
                            : "bg-slate-100 text-slate-600 hover:bg-slate-200"
                        }`}
                      >
                        {type.icon} {type.label}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Textarea
                    placeholder="Share your journey, recipe, tip, or question..."
                    value={postData.content}
                    onChange={(e) => setPostData({ ...postData, content: e.target.value })}
                    rows={5}
                    className="resize-none"
                  />
                </div>

                <div className="flex justify-end gap-3">
                  <Button variant="outline" onClick={() => setShowPostForm(false)}>
                    Cancel
                  </Button>
                  <Button
                    onClick={() => createPostMutation.mutate(postData)}
                    disabled={!postData.content}
                    className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700"
                  >
                    Post
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Filters */}
          <Card className="border-none shadow-lg">
            <CardContent className="p-4">
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setSelectedFilter("all")}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    selectedFilter === "all"
                      ? "bg-gradient-to-r from-purple-500 to-purple-600 text-white"
                      : "bg-slate-100 text-slate-600 hover:bg-slate-200"
                  }`}
                >
                  All Posts
                </button>
                {postTypes.map((type) => (
                  <button
                    key={type.value}
                    onClick={() => setSelectedFilter(type.value)}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                      selectedFilter === type.value
                        ? type.color + " border-2 border-current"
                        : "bg-slate-100 text-slate-600 hover:bg-slate-200"
                    }`}
                  >
                    {type.icon} {type.label}
                  </button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Posts Feed */}
          <div className="space-y-4">
            {posts.length === 0 ? (
              <Card className="border-none shadow-lg">
                <CardContent className="p-12 text-center">
                  <Users className="w-20 h-20 text-slate-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-slate-900 mb-2">No posts yet</h3>
                  <p className="text-slate-600 mb-6">Be the first to share with the community!</p>
                  <Button
                    onClick={() => setShowPostForm(true)}
                    className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700"
                  >
                    Share Your Story
                  </Button>
                </CardContent>
              </Card>
            ) : (
              posts.map((post) => {
                const typeInfo = getPostTypeInfo(post.post_type);
                return (
                  <Card key={post.id} className="border-none shadow-lg hover:shadow-xl transition-shadow">
                    <CardContent className="p-6">
                      <div className="flex items-start gap-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                          {post.author_name?.[0]?.toUpperCase() || "U"}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="font-semibold text-slate-900">{post.author_name}</h3>
                            <Badge className={typeInfo.color}>
                              {typeInfo.icon} {typeInfo.label}
                            </Badge>
                            <span className="text-sm text-slate-500 ml-auto">
                              {format(new Date(post.created_date), "MMM d")}
                            </span>
                          </div>
                          
                          <p className="text-slate-700 mb-4 whitespace-pre-wrap">{post.content}</p>

                          {post.image_url && (
                            <img
                              src={post.image_url}
                              alt="Post"
                              className="rounded-xl w-full mb-4 max-h-96 object-cover"
                            />
                          )}

                          <div className="flex items-center gap-6 text-sm text-slate-600">
                            <button
                              onClick={() => likePostMutation.mutate(post.id)}
                              className="flex items-center gap-2 hover:text-red-600 transition-colors"
                            >
                              <Heart className="w-5 h-5" />
                              <span>{post.likes_count}</span>
                            </button>
                            <button className="flex items-center gap-2 hover:text-blue-600 transition-colors">
                              <MessageCircle className="w-5 h-5" />
                              <span>{post.comments_count}</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Top Members */}
          <Card className="border-none shadow-lg">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2 text-lg">
                <Trophy className="w-5 h-5 text-amber-600" />
                Top Contributors
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              {topMembers.length === 0 ? (
                <p className="text-sm text-slate-500 text-center py-4">No contributors yet</p>
              ) : (
                <div className="space-y-3">
                  {topMembers.map((member, index) => (
                    <div key={index} className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${
                        index === 0 ? "bg-gradient-to-br from-yellow-400 to-yellow-600 text-white" :
                        index === 1 ? "bg-gradient-to-br from-slate-300 to-slate-400 text-white" :
                        index === 2 ? "bg-gradient-to-br from-orange-300 to-orange-500 text-white" :
                        "bg-slate-100 text-slate-600"
                      }`}>
                        {index + 1}
                      </div>
                      <div className="flex-1">
                        <p className="font-medium text-slate-900">{member.name}</p>
                        <p className="text-xs text-slate-500">{member.likes} likes</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Active Challenges */}
          <Card className="border-none shadow-lg">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2 text-lg">
                <Target className="w-5 h-5 text-cyan-600" />
                Active Challenges
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              {challenges.length === 0 ? (
                <p className="text-sm text-slate-500 text-center py-4">No active challenges</p>
              ) : (
                <div className="space-y-3">
                  {challenges.slice(0, 5).map((challenge) => (
                    <div key={challenge.id} className="p-4 bg-gradient-to-br from-cyan-50 to-teal-50 rounded-xl border border-cyan-200">
                      <h3 className="font-semibold text-slate-900 mb-1">{challenge.title}</h3>
                      <p className="text-sm text-slate-600 mb-2">{challenge.description}</p>
                      <div className="flex items-center justify-between text-xs text-slate-600">
                        <span>
                          <Award className="w-3 h-3 inline mr-1" />
                          {challenge.points_reward} points
                        </span>
                        <span>
                          <Users className="w-3 h-3 inline mr-1" />
                          {challenge.participants_count} joined
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Community Stats */}
          <Card className="border-none shadow-lg bg-gradient-to-br from-purple-500 to-purple-600 text-white">
            <CardContent className="p-6">
              <h3 className="font-bold text-xl mb-4">Community Impact</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-white/90">Total Posts</span>
                  <span className="font-bold text-2xl">{posts.length}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-white/90">Active Members</span>
                  <span className="font-bold text-2xl">{topMembers.length}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-white/90">Challenges</span>
                  <span className="font-bold text-2xl">{challenges.length}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
