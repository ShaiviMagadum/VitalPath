import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  Activity, 
  TrendingUp, 
  TrendingDown, 
  Target,
  Heart,
  Flame,
  Moon,
  Brain,
  Plus,
  ArrowRight,
  Award,
  Utensils,
  Zap,
  Clock,
  Bot,
  Sparkles
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { format, startOfWeek, endOfWeek } from "date-fns";

export default function Dashboard() {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const loadUser = async () => {
      const userData = await base44.auth.me();
      setUser(userData);
    };
    loadUser();
  }, []);

  const { data: healthProfile } = useQuery({
    queryKey: ["healthProfile", user?.email],
    queryFn: async () => {
      const profiles = await base44.entities.HealthProfile.filter({ user_email: user?.email });
      return profiles[0];
    },
    enabled: !!user?.email,
  });

  const { data: todayMeals = [] } = useQuery({
    queryKey: ["todayMeals", user?.email],
    queryFn: async () => {
      const today = format(new Date(), "yyyy-MM-dd");
      return await base44.entities.MealLog.filter({ user_email: user?.email, meal_date: today });
    },
    enabled: !!user?.email,
  });

  const { data: todayActivity = [] } = useQuery({
    queryKey: ["todayActivity", user?.email],
    queryFn: async () => {
      const today = format(new Date(), "yyyy-MM-dd");
      return await base44.entities.ActivityLog.filter({ user_email: user?.email, activity_date: today });
    },
    enabled: !!user?.email,
  });

  const { data: weeklyWeight = [] } = useQuery({
    queryKey: ["weeklyWeight", user?.email],
    queryFn: async () => {
      return await base44.entities.WeightEntry.filter({ user_email: user?.email }, "-entry_date", 7);
    },
    enabled: !!user?.email,
  });

  const { data: activeGoals = [] } = useQuery({
    queryKey: ["activeGoals", user?.email],
    queryFn: async () => {
      return await base44.entities.Goal.filter({ user_email: user?.email, status: "active" }, "-created_date", 4);
    },
    enabled: !!user?.email,
  });

  const todayCalories = todayMeals.reduce((sum, meal) => sum + (meal.calories || 0), 0);
  const todayCaloriesBurned = todayActivity.reduce((sum, activity) => sum + (activity.calories_burned || 0), 0);
  const todaySteps = todayActivity.reduce((sum, activity) => sum + (activity.steps || 0), 0);
  const dailyCalorieGoal = 2000;
  const dailyStepsGoal = 10000;

  const getHealthScoreColor = (score) => {
    if (score >= 80) return "text-green-600";
    if (score >= 60) return "text-yellow-600";
    if (score >= 40) return "text-orange-600";
    return "text-red-600";
  };

  const getRiskBadge = (risk) => {
    const colors = {
      low: "bg-green-100 text-green-800 border-green-200",
      moderate: "bg-yellow-100 text-yellow-800 border-yellow-200",
      high: "bg-orange-100 text-orange-800 border-orange-200",
      very_high: "bg-red-100 text-red-800 border-red-200"
    };
    return colors[risk] || colors.moderate;
  };

  if (!healthProfile) {
    return (
      <div className="p-8 max-w-4xl mx-auto">
        <Card className="border-none shadow-xl bg-gradient-to-br from-cyan-50 to-teal-50">
          <CardContent className="p-12 text-center">
            <div className="w-20 h-20 bg-gradient-to-br from-cyan-500 to-teal-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg shadow-cyan-500/30">
              <Heart className="w-10 h-10 text-white" />
            </div>
            <h2 className="text-3xl font-bold text-slate-900 mb-4">Welcome to VitalPath</h2>
            <p className="text-slate-600 mb-8 text-lg">Let's start your health journey with a quick assessment</p>
            <Link to={createPageUrl("Onboarding")}>
              <Button size="lg" className="bg-gradient-to-r from-cyan-500 to-teal-600 hover:from-cyan-600 hover:to-teal-700 shadow-lg shadow-cyan-500/30">
                Start Health Assessment
                <ArrowRight className="w-5 h-5 ml-2" />
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900">
            Welcome back, {user?.full_name?.split(" ")[0] || "Friend"} 👋
          </h1>
          <p className="text-slate-500 mt-1">Here's your health summary for {format(new Date(), "EEEE, MMM d")}</p>
        </div>
        <Badge className={`${getRiskBadge(healthProfile.risk_level)} border px-4 py-2 text-sm font-semibold`}>
          {healthProfile.risk_level?.replace("_", " ").toUpperCase()} RISK
        </Badge>
      </div>

      {/* Featured Revolutionary Components */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Link to={createPageUrl("LiveDashboard")}>
          <Card className="border-none shadow-xl hover:shadow-2xl transition-all transform hover:scale-105 cursor-pointer bg-gradient-to-br from-green-50 via-emerald-50 to-cyan-50 animate-live-pulse">
            <CardContent className="p-6 text-center">
              <div className="relative inline-block mb-3">
                <Zap className="w-12 h-12 text-green-600 mx-auto" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-ping" />
              </div>
              <h3 className="font-bold text-lg text-slate-900 mb-2">VitalPath Live</h3>
              <p className="text-sm text-slate-600 mb-2">Real-time health monitoring</p>
              <Badge className="bg-green-500 text-white">LIVE NOW</Badge>
            </CardContent>
          </Card>
        </Link>

        <Link to={createPageUrl("TimeMachine")}>
          <Card className="border-none shadow-xl hover:shadow-2xl transition-all transform hover:scale-105 cursor-pointer bg-gradient-to-br from-cyan-50 via-blue-50 to-purple-50 animate-pulse-glow">
            <CardContent className="p-6 text-center">
              <Clock className="w-12 h-12 text-cyan-600 mx-auto mb-3" />
              <h3 className="font-bold text-lg text-slate-900 mb-2">Time Machine</h3>
              <p className="text-sm text-slate-600 mb-2">See your health future</p>
              <Badge className="bg-gradient-to-r from-cyan-500 to-purple-600 text-white">NEW</Badge>
            </CardContent>
          </Card>
        </Link>

        <Link to={createPageUrl("AICoach")}>
          <Card className="border-none shadow-xl hover:shadow-2xl transition-all transform hover:scale-105 cursor-pointer bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
            <CardContent className="p-6 text-center">
              <Bot className="w-12 h-12 text-purple-600 mx-auto mb-3 animate-pulse" />
              <h3 className="font-bold text-lg text-slate-900 mb-2">AI Coach</h3>
              <p className="text-sm text-slate-600 mb-2">24/7 health guidance</p>
              <Badge className="bg-gradient-to-r from-purple-500 to-pink-600 text-white">
                <Sparkles className="w-3 h-3 mr-1" />
                AI
              </Badge>
            </CardContent>
          </Card>
        </Link>
      </div>

      {/* Health Score Card */}
      <Card className="border-none shadow-xl bg-gradient-to-br from-cyan-500 via-teal-500 to-emerald-600 text-white overflow-hidden relative">
        <div className="absolute top-0 right-0 w-64 h-64 bg-white/10 rounded-full -translate-y-32 translate-x-32" />
        <div className="absolute bottom-0 left-0 w-48 h-48 bg-white/10 rounded-full translate-y-24 -translate-x-24" />
        <CardContent className="p-8 relative">
          <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-6">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-4">
                <Award className="w-8 h-8" />
                <h2 className="text-2xl font-bold">Your Health Score</h2>
              </div>
              <div className="flex items-baseline gap-3">
                <span className="text-6xl font-bold">{healthProfile.health_score || 0}</span>
                <span className="text-2xl text-white/80">/100</span>
              </div>
              <p className="text-white/90 mt-4 text-lg">
                {healthProfile.health_score >= 80 && "🌟 Excellent! Keep up the great work."}
                {healthProfile.health_score >= 60 && healthProfile.health_score < 80 && "💪 Good progress! Stay consistent."}
                {healthProfile.health_score >= 40 && healthProfile.health_score < 60 && "📈 You're on the right track."}
                {healthProfile.health_score < 40 && "💙 Let's work together to improve."}
              </p>
            </div>
            <div className="flex flex-col gap-3">
              <Link to={createPageUrl("Insights")}>
                <Button variant="secondary" className="bg-white text-cyan-700 hover:bg-white/90 shadow-lg w-full">
                  View Full Report
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </Link>
              <Link to={createPageUrl("TimeMachine")}>
                <Button variant="ghost" className="text-white hover:bg-white/20 w-full">
                  <Clock className="w-4 h-4 mr-2" />
                  See Future
                </Button>
              </Link>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Today's Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-none shadow-lg hover:shadow-xl transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-orange-100 to-orange-200 rounded-2xl flex items-center justify-center">
                <Flame className="w-6 h-6 text-orange-600" />
              </div>
              <span className="text-xs font-semibold text-slate-500 uppercase">Nutrition</span>
            </div>
            <div className="space-y-2">
              <div className="flex items-baseline gap-2">
                <span className="text-3xl font-bold text-slate-900">{todayCalories}</span>
                <span className="text-sm text-slate-500">/ {dailyCalorieGoal} cal</span>
              </div>
              <Progress value={(todayCalories / dailyCalorieGoal) * 100} className="h-2" />
              <p className="text-xs text-slate-600">
                {dailyCalorieGoal - todayCalories > 0 
                  ? `${dailyCalorieGoal - todayCalories} cal remaining` 
                  : "Goal reached! 🎉"}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-lg hover:shadow-xl transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center">
                <Activity className="w-6 h-6 text-blue-600" />
              </div>
              <span className="text-xs font-semibold text-slate-500 uppercase">Activity</span>
            </div>
            <div className="space-y-2">
              <div className="flex items-baseline gap-2">
                <span className="text-3xl font-bold text-slate-900">{todaySteps.toLocaleString()}</span>
                <span className="text-sm text-slate-500">steps</span>
              </div>
              <Progress value={(todaySteps / dailyStepsGoal) * 100} className="h-2" />
              <p className="text-xs text-slate-600">
                {dailyStepsGoal - todaySteps > 0 
                  ? `${(dailyStepsGoal - todaySteps).toLocaleString()} to goal` 
                  : "Goal crushed! 💪"}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-lg hover:shadow-xl transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center">
                <TrendingDown className="w-6 h-6 text-purple-600" />
              </div>
              <span className="text-xs font-semibold text-slate-500 uppercase">Weight</span>
            </div>
            <div className="space-y-2">
              <div className="flex items-baseline gap-2">
                <span className="text-3xl font-bold text-slate-900">
                  {healthProfile.current_weight_lbs || "--"}
                </span>
                <span className="text-sm text-slate-500">lbs</span>
              </div>
              <div className="flex items-center gap-2 text-xs">
                {weeklyWeight.length > 1 && weeklyWeight[0].weight_lbs < weeklyWeight[1].weight_lbs && (
                  <>
                    <TrendingDown className="w-4 h-4 text-green-600" />
                    <span className="text-green-600 font-semibold">
                      -{(weeklyWeight[1].weight_lbs - weeklyWeight[0].weight_lbs).toFixed(1)} lbs this week
                    </span>
                  </>
                )}
                {weeklyWeight.length > 1 && weeklyWeight[0].weight_lbs > weeklyWeight[1].weight_lbs && (
                  <>
                    <TrendingUp className="w-4 h-4 text-orange-600" />
                    <span className="text-orange-600 font-semibold">
                      +{(weeklyWeight[0].weight_lbs - weeklyWeight[1].weight_lbs).toFixed(1)} lbs this week
                    </span>
                  </>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-lg hover:shadow-xl transition-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-pink-100 to-pink-200 rounded-2xl flex items-center justify-center">
                <Heart className="w-6 h-6 text-pink-600" />
              </div>
              <span className="text-xs font-semibold text-slate-500 uppercase">BMI</span>
            </div>
            <div className="space-y-2">
              <div className="flex items-baseline gap-2">
                <span className="text-3xl font-bold text-slate-900">
                  {healthProfile.bmi?.toFixed(1) || "--"}
                </span>
              </div>
              <p className="text-xs text-slate-600">
                {healthProfile.bmi < 18.5 && "Underweight"}
                {healthProfile.bmi >= 18.5 && healthProfile.bmi < 25 && "✅ Healthy weight"}
                {healthProfile.bmi >= 25 && healthProfile.bmi < 30 && "⚠️ Overweight"}
                {healthProfile.bmi >= 30 && "⚠️ Obese"}
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Active Goals */}
      {activeGoals.length > 0 && (
        <Card className="border-none shadow-lg">
          <CardHeader className="border-b border-slate-100">
            <div className="flex items-center justify-between">
              <CardTitle className="text-xl font-bold text-slate-900 flex items-center gap-2">
                <Target className="w-5 h-5 text-cyan-600" />
                Active Goals
              </CardTitle>
              <Link to={createPageUrl("Goals")}>
                <Button variant="ghost" size="sm" className="text-cyan-600 hover:text-cyan-700">
                  View All
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </Link>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {activeGoals.map((goal) => (
                <div key={goal.id} className="p-4 bg-gradient-to-br from-slate-50 to-slate-100 rounded-xl border border-slate-200 hover:border-cyan-300 transition-all">
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-slate-900">{goal.title}</h3>
                    <Badge variant="outline" className="bg-white">
                      {goal.progress_percentage || 0}%
                    </Badge>
                  </div>
                  <Progress value={goal.progress_percentage || 0} className="h-2 mb-2" />
                  <p className="text-xs text-slate-600">
                    {goal.current_value || 0} / {goal.target_value} {goal.unit}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quick Actions */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Link to={createPageUrl("Nutrition")} className="block">
          <Card className="border-none shadow-lg hover:shadow-xl transition-all hover:scale-105 cursor-pointer bg-gradient-to-br from-orange-50 to-orange-100">
            <CardContent className="p-6 text-center">
              <Utensils className="w-8 h-8 text-orange-600 mx-auto mb-3" />
              <p className="font-semibold text-slate-900 text-sm">Log Meal</p>
            </CardContent>
          </Card>
        </Link>

        <Link to={createPageUrl("Activity")} className="block">
          <Card className="border-none shadow-lg hover:shadow-xl transition-all hover:scale-105 cursor-pointer bg-gradient-to-br from-blue-50 to-blue-100">
            <CardContent className="p-6 text-center">
              <Activity className="w-8 h-8 text-blue-600 mx-auto mb-3" />
              <p className="font-semibold text-slate-900 text-sm">Log Activity</p>
            </CardContent>
          </Card>
        </Link>

        <Link to={createPageUrl("Wellness")} className="block">
          <Card className="border-none shadow-lg hover:shadow-xl transition-all hover:scale-105 cursor-pointer bg-gradient-to-br from-purple-50 to-purple-100">
            <CardContent className="p-6 text-center">
              <Moon className="w-8 h-8 text-purple-600 mx-auto mb-3" />
              <p className="font-semibold text-slate-900 text-sm">Log Sleep</p>
            </CardContent>
          </Card>
        </Link>

        <Link to={createPageUrl("Goals")} className="block">
          <Card className="border-none shadow-lg hover:shadow-xl transition-all hover:scale-105 cursor-pointer bg-gradient-to-br from-green-50 to-green-100">
            <CardContent className="p-6 text-center">
              <Plus className="w-8 h-8 text-green-600 mx-auto mb-3" />
              <p className="font-semibold text-slate-900 text-sm">New Goal</p>
            </CardContent>
          </Card>
        </Link>
      </div>

      {/* Daily Tip */}
      <Card className="border-none shadow-lg bg-gradient-to-r from-purple-50 to-pink-50 border-l-4 border-purple-500">
        <CardContent className="p-6">
          <div className="flex items-start gap-4">
            <div className="w-12 h-12 bg-purple-200 rounded-full flex items-center justify-center flex-shrink-0">
              <Sparkles className="w-6 h-6 text-purple-700" />
            </div>
            <div>
              <h3 className="font-bold text-purple-900 mb-2">💡 Daily Health Tip</h3>
              <p className="text-sm text-purple-800">
                Drink a glass of water first thing in the morning to kickstart your metabolism and hydrate your body after sleep. This simple habit can boost your energy and support weight management!
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
