import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { 
  Target, 
  Plus, 
  TrendingUp, 
  Calendar,
  Award,
  CheckCircle2,
  Circle,
  Pause,
  Play,
  Trash2,
  Edit2
} from "lucide-react";
import { format, differenceInDays } from "date-fns";

export default function Goals() {
  const [user, setUser] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [editingGoal, setEditingGoal] = useState(null);
  const queryClient = useQueryClient();

  const [goalData, setGoalData] = useState({
    goal_type: "weight_loss",
    title: "",
    description: "",
    target_value: "",
    current_value: "",
    unit: "lbs",
    start_date: format(new Date(), "yyyy-MM-dd"),
    target_date: "",
    status: "active"
  });

  useEffect(() => {
    const loadUser = async () => {
      const userData = await base44.auth.me();
      setUser(userData);
    };
    loadUser();
  }, []);

  const { data: goals = [] } = useQuery({
    queryKey: ["goals", user?.email],
    queryFn: async () => {
      return await base44.entities.Goal.filter({ user_email: user?.email }, "-created_date");
    },
    enabled: !!user?.email,
  });

  const createGoalMutation = useMutation({
    mutationFn: async (goal) => {
      const progress = goal.current_value && goal.target_value
        ? Math.min(100, (parseFloat(goal.current_value) / parseFloat(goal.target_value)) * 100)
        : 0;

      if (editingGoal) {
        return await base44.entities.Goal.update(editingGoal.id, {
          ...goal,
          target_value: parseFloat(goal.target_value),
          current_value: parseFloat(goal.current_value || 0),
          progress_percentage: progress
        });
      }

      return await base44.entities.Goal.create({
        ...goal,
        user_email: user.email,
        target_value: parseFloat(goal.target_value),
        current_value: parseFloat(goal.current_value || 0),
        progress_percentage: progress
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["goals"] });
      setShowForm(false);
      setEditingGoal(null);
      resetForm();
    },
  });

  const updateGoalStatusMutation = useMutation({
    mutationFn: async ({ goalId, status }) => {
      return await base44.entities.Goal.update(goalId, { status });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["goals"] });
    },
  });

  const deleteGoalMutation = useMutation({
    mutationFn: async (goalId) => {
      return await base44.entities.Goal.delete(goalId);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["goals"] });
    },
  });

  const resetForm = () => {
    setGoalData({
      goal_type: "weight_loss",
      title: "",
      description: "",
      target_value: "",
      current_value: "",
      unit: "lbs",
      start_date: format(new Date(), "yyyy-MM-dd"),
      target_date: "",
      status: "active"
    });
  };

  const handleEdit = (goal) => {
    setEditingGoal(goal);
    setGoalData({
      goal_type: goal.goal_type,
      title: goal.title,
      description: goal.description || "",
      target_value: goal.target_value.toString(),
      current_value: goal.current_value?.toString() || "0",
      unit: goal.unit || "lbs",
      start_date: goal.start_date,
      target_date: goal.target_date,
      status: goal.status
    });
    setShowForm(true);
  };

  const activeGoals = goals.filter(g => g.status === "active");
  const completedGoals = goals.filter(g => g.status === "completed");
  const pausedGoals = goals.filter(g => g.status === "paused");

  const getGoalTypeIcon = (type) => {
    const icons = {
      weight_loss: "⚖️",
      exercise: "🏃",
      nutrition: "🥗",
      sleep: "😴",
      stress: "🧘",
      glucose_control: "🩸",
      custom: "🎯"
    };
    return icons[type] || "🎯";
  };

  const getGoalTypeColor = (type) => {
    const colors = {
      weight_loss: "from-purple-500 to-purple-600",
      exercise: "from-blue-500 to-blue-600",
      nutrition: "from-green-500 to-green-600",
      sleep: "from-indigo-500 to-indigo-600",
      stress: "from-pink-500 to-pink-600",
      glucose_control: "from-red-500 to-red-600",
      custom: "from-orange-500 to-orange-600"
    };
    return colors[type] || colors.custom;
  };

  const getDaysRemaining = (targetDate) => {
    return differenceInDays(new Date(targetDate), new Date());
  };

  return (
    <div className="p-4 md:p-8 space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900">My Goals</h1>
          <p className="text-slate-500 mt-1">Set SMART goals and track your progress</p>
        </div>
        <Button
          onClick={() => {
            setShowForm(!showForm);
            setEditingGoal(null);
            resetForm();
          }}
          className="bg-gradient-to-r from-cyan-500 to-teal-600 hover:from-cyan-600 hover:to-teal-700"
        >
          <Plus className="w-5 h-5 mr-2" />
          New Goal
        </Button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="border-none shadow-lg bg-gradient-to-br from-green-50 to-green-100">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-green-900 mb-1">Active Goals</p>
                <p className="text-3xl font-bold text-slate-900">{activeGoals.length}</p>
              </div>
              <Target className="w-12 h-12 text-green-600" />
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-lg bg-gradient-to-br from-blue-50 to-blue-100">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-blue-900 mb-1">Completed</p>
                <p className="text-3xl font-bold text-slate-900">{completedGoals.length}</p>
              </div>
              <Award className="w-12 h-12 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-lg bg-gradient-to-br from-purple-50 to-purple-100">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-purple-900 mb-1">Success Rate</p>
                <p className="text-3xl font-bold text-slate-900">
                  {goals.length > 0 ? Math.round((completedGoals.length / goals.length) * 100) : 0}%
                </p>
              </div>
              <TrendingUp className="w-12 h-12 text-purple-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Goal Form */}
      {showForm && (
        <Card className="border-none shadow-xl">
          <CardHeader className="border-b border-slate-100">
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5 text-cyan-600" />
              {editingGoal ? "Edit Goal" : "Create New Goal"}
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6 space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="goal_type">Goal Type</Label>
                <select
                  id="goal_type"
                  value={goalData.goal_type}
                  onChange={(e) => setGoalData({ ...goalData, goal_type: e.target.value })}
                  className="w-full px-3 py-2 border border-slate-200 rounded-md"
                >
                  <option value="weight_loss">Weight Loss</option>
                  <option value="exercise">Exercise</option>
                  <option value="nutrition">Nutrition</option>
                  <option value="sleep">Sleep</option>
                  <option value="stress">Stress Management</option>
                  <option value="glucose_control">Glucose Control</option>
                  <option value="custom">Custom</option>
                </select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="title">Goal Title</Label>
                <Input
                  id="title"
                  placeholder="e.g., Lose 20 pounds"
                  value={goalData.title}
                  onChange={(e) => setGoalData({ ...goalData, title: e.target.value })}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="What do you want to achieve and why?"
                value={goalData.description}
                onChange={(e) => setGoalData({ ...goalData, description: e.target.value })}
                rows={3}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="current_value">Current Value</Label>
                <Input
                  id="current_value"
                  type="number"
                  placeholder="0"
                  value={goalData.current_value}
                  onChange={(e) => setGoalData({ ...goalData, current_value: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="target_value">Target Value</Label>
                <Input
                  id="target_value"
                  type="number"
                  placeholder="100"
                  value={goalData.target_value}
                  onChange={(e) => setGoalData({ ...goalData, target_value: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="unit">Unit</Label>
                <Input
                  id="unit"
                  placeholder="lbs, steps, hours"
                  value={goalData.unit}
                  onChange={(e) => setGoalData({ ...goalData, unit: e.target.value })}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="start_date">Start Date</Label>
                <Input
                  id="start_date"
                  type="date"
                  value={goalData.start_date}
                  onChange={(e) => setGoalData({ ...goalData, start_date: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="target_date">Target Date</Label>
                <Input
                  id="target_date"
                  type="date"
                  value={goalData.target_date}
                  onChange={(e) => setGoalData({ ...goalData, target_date: e.target.value })}
                />
              </div>
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setShowForm(false);
                  setEditingGoal(null);
                  resetForm();
                }}
              >
                Cancel
              </Button>
              <Button
                onClick={() => createGoalMutation.mutate(goalData)}
                disabled={!goalData.title || !goalData.target_value}
                className="bg-gradient-to-r from-cyan-500 to-teal-600 hover:from-cyan-600 hover:to-teal-700"
              >
                {editingGoal ? "Update Goal" : "Create Goal"}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Active Goals */}
      {activeGoals.length > 0 && (
        <Card className="border-none shadow-lg">
          <CardHeader className="border-b border-slate-100">
            <CardTitle className="flex items-center gap-2">
              <Circle className="w-5 h-5 text-cyan-600" />
              Active Goals
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {activeGoals.map((goal) => (
                <div
                  key={goal.id}
                  className={`p-6 rounded-2xl bg-gradient-to-br ${getGoalTypeColor(goal.goal_type)} text-white shadow-lg`}
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-4xl">{getGoalTypeIcon(goal.goal_type)}</span>
                      <div>
                        <h3 className="font-bold text-xl">{goal.title}</h3>
                        <p className="text-white/80 text-sm capitalize">{goal.goal_type.replace(/_/g, " ")}</p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEdit(goal)}
                        className="p-2 hover:bg-white/20 rounded-lg transition-colors"
                      >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => updateGoalStatusMutation.mutate({ goalId: goal.id, status: "paused" })}
                        className="p-2 hover:bg-white/20 rounded-lg transition-colors"
                      >
                        <Pause className="w-4 h-4" />
                      </button>
                    </div>
                  </div>

                  {goal.description && (
                    <p className="text-white/90 text-sm mb-4">{goal.description}</p>
                  )}

                  <div className="space-y-3">
                    <div className="flex justify-between text-sm">
                      <span>Progress</span>
                      <span className="font-bold">{goal.progress_percentage?.toFixed(0) || 0}%</span>
                    </div>
                    <Progress value={goal.progress_percentage || 0} className="h-3 bg-white/30" />
                    <div className="flex justify-between text-sm">
                      <span>{goal.current_value || 0} {goal.unit}</span>
                      <span>{goal.target_value} {goal.unit}</span>
                    </div>
                  </div>

                  {goal.target_date && (
                    <div className="mt-4 pt-4 border-t border-white/20 flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4" />
                        <span>Target: {format(new Date(goal.target_date), "MMM d, yyyy")}</span>
                      </div>
                      <span className="font-semibold">
                        {getDaysRemaining(goal.target_date) > 0
                          ? `${getDaysRemaining(goal.target_date)} days left`
                          : "Overdue"}
 
