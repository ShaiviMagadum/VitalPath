import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { 
  Heart, 
  ArrowRight, 
  ArrowLeft,
  Activity,
  Moon,
  Brain,
  Target
} from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";

export default function Onboarding() {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null);
  
  const [formData, setFormData] = useState({
    age: "",
    gender: "",
    height_inches: "",
    current_weight_lbs: "",
    target_weight_lbs: "",
    waist_circumference_inches: "",
    family_history_diabetes: false,
    family_history_obesity: false,
    current_conditions: [],
    activity_level: "",
    sleep_hours_avg: "",
    stress_level: "",
    dietary_preferences: [],
    dietary_restrictions: []
  });

  React.useEffect(() => {
    const loadUser = async () => {
      const userData = await base44.auth.me();
      setUser(userData);
    };
    loadUser();
  }, []);

  const calculateBMI = (weightLbs, heightInches) => {
    return (weightLbs / (heightInches * heightInches)) * 703;
  };

  const calculateHealthScore = (data) => {
    let score = 100;
    const bmi = calculateBMI(parseFloat(data.current_weight_lbs), parseFloat(data.height_inches));
    
    if (bmi > 30) score -= 20;
    else if (bmi > 25) score -= 10;
    
    if (data.activity_level === "sedentary") score -= 15;
    else if (data.activity_level === "lightly_active") score -= 5;
    
    if (parseFloat(data.sleep_hours_avg) < 6) score -= 10;
    
    if (data.stress_level === "very_high") score -= 15;
    else if (data.stress_level === "high") score -= 10;
    
    if (data.current_conditions.includes("type2_diabetes")) score -= 20;
    else if (data.current_conditions.includes("prediabetes")) score -= 10;
    
    if (data.family_history_diabetes) score -= 5;
    
    return Math.max(0, Math.min(100, score));
  };

  const calculateRiskLevel = (healthScore) => {
    if (healthScore >= 80) return "low";
    if (healthScore >= 60) return "moderate";
    if (healthScore >= 40) return "high";
    return "very_high";
  };

  const handleSubmit = async () => {
    setLoading(true);
    try {
      const bmi = calculateBMI(parseFloat(formData.current_weight_lbs), parseFloat(formData.height_inches));
      const healthScore = calculateHealthScore(formData);
      const riskLevel = calculateRiskLevel(healthScore);

      await base44.entities.HealthProfile.create({
        ...formData,
        user_email: user.email,
        bmi: bmi,
        health_score: healthScore,
        risk_level: riskLevel,
        age: parseInt(formData.age),
        height_inches: parseFloat(formData.height_inches),
        current_weight_lbs: parseFloat(formData.current_weight_lbs),
        target_weight_lbs: parseFloat(formData.target_weight_lbs),
        waist_circumference_inches: parseFloat(formData.waist_circumference_inches),
        sleep_hours_avg: parseFloat(formData.sleep_hours_avg)
      });

      await base44.entities.WeightEntry.create({
        user_email: user.email,
        weight_lbs: parseFloat(formData.current_weight_lbs),
        bmi: bmi,
        waist_inches: parseFloat(formData.waist_circumference_inches),
        entry_date: new Date().toISOString().split('T')[0]
      });

      navigate(createPageUrl("Dashboard"));
    } catch (error) {
      console.error("Error creating health profile:", error);
    }
    setLoading(false);
  };

  const updateForm = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const toggleArrayItem = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].includes(value)
        ? prev[field].filter(item => item !== value)
        : [...prev[field], value]
    }));
  };

  const totalSteps = 4;
  const progress = (step / totalSteps) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-cyan-50 via-white to-teal-50 p-4 md:p-8">
      <div className="max-w-3xl mx-auto">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-gradient-to-br from-cyan-500 to-teal-600 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg shadow-cyan-500/30">
            <Heart className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">Health Assessment</h1>
          <p className="text-slate-600">Help us personalize your health journey</p>
          <div className="mt-6">
            <Progress value={progress} className="h-2" />
            <p className="text-sm text-slate-500 mt-2">Step {step} of {totalSteps}</p>
          </div>
        </div>

        <Card className="border-none shadow-2xl">
          <CardHeader className="border-b border-slate-100">
            <CardTitle className="text-2xl flex items-center gap-2">
              {step === 1 && <><Activity className="w-6 h-6 text-cyan-600" /> Basic Information</>}
              {step === 2 && <><Heart className="w-6 h-6 text-cyan-600" /> Health Metrics</>}
              {step === 3 && <><Moon className="w-6 h-6 text-cyan-600" /> Lifestyle Habits</>}
              {step === 4 && <><Target className="w-6 h-6 text-cyan-600" /> Goals & Preferences</>}
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6 md:p-8">
            {step === 1 && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="age">Age *</Label>
                    <Input
                      id="age"
                      type="number"
                      placeholder="Enter your age"
                      value={formData.age}
                      onChange={(e) => updateForm("age", e.target.value)}
                      className="border-slate-200"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="gender">Gender *</Label>
                    <select
                      id="gender"
                      value={formData.gender}
                      onChange={(e) => updateForm("gender", e.target.value)}
                      className="w-full px-3 py-2 border border-slate-200 rounded-md"
                    >
                      <option value="">Select gender</option>
                      <option value="male">Male</option>
                      <option value="female">Female</option>
                      <option value="other">Other</option>
                      <option value="prefer_not_to_say">Prefer not to say</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="height">Height (inches) *</Label>
                    <Input
                      id="height"
                      type="number"
                      placeholder="e.g., 68"
                      value={formData.height_inches}
                      onChange={(e) => updateForm("height_inches", e.target.value)}
                      className="border-slate-200"
                    />
                    <p className="text-xs text-slate-500">5'8" = 68 inches</p>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="weight">Current Weight (lbs) *</Label>
                    <Input
                      id="weight"
                      type="number"
                      placeholder="e.g., 180"
                      value={formData.current_weight_lbs}
                      onChange={(e) => updateForm("current_weight_lbs", e.target.value)}
                      className="border-slate-200"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="target_weight">Target Weight (lbs) *</Label>
                    <Input
                      id="target_weight"
                      type="number"
                      placeholder="e.g., 160"
                      value={formData.target_weight_lbs}
                      onChange={(e) => updateForm("target_weight_lbs", e.target.value)}
                      className="border-slate-200"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="waist">Waist Circumference (inches)</Label>
                    <Input
                      id="waist"
                      type="number"
                      placeholder="e.g., 34"
                      value={formData.waist_circumference_inches}
                      onChange={(e) => updateForm("waist_circumference_inches", e.target.value)}
                      className="border-slate-200"
                    />
                  </div>
                </div>
              </div>
            )}

            {step === 2 && (
              <div className="space-y-6">
                <div className="space-y-4">
                  <Label className="text-lg">Family Health History</Label>
                  <div className="space-y-3">
                    <div className="flex items-center space-x-3">
                      <Checkbox
                        id="diabetes_history"
                        checked={formData.family_history_diabetes}
                        onCheckedChange={(checked) => updateForm("family_history_diabetes", checked)}
                      />
                      <label htmlFor="diabetes_history" className="text-sm font-medium">
                        Family history of diabetes
                      </label>
                    </div>
                    <div className="flex items-center space-x-3">
                      <Checkbox
                        id="obesity_history"
                        checked={formData.family_history_obesity}
                        onCheckedChange={(checked) => updateForm("family_history_obesity", checked)}
                      />
                      <label htmlFor="obesity_history" className="text-sm font-medium">
                        Family history of obesity
                      </label>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <Label className="text-lg">Current Health Conditions</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {["prediabetes", "type2_diabetes", "hypertension", "high_cholesterol", "metabolic_syndrome", "none"].map((condition) => (
                      <div key={condition} className="flex items-center space-x-3">
                        <Checkbox
                          id={condition}
                          checked={formData.current_conditions.includes(condition)}
                          onCheckedChange={() => toggleArrayItem("current_conditions", condition)}
                        />
                        <label htmlFor={condition} className="text-sm font-medium capitalize">
                          {condition.replace(/_/g, " ")}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {step === 3 && (
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="activity_level">Activity Level *</Label>
                  <select
                    id="activity_level"
                    value={formData.activity_level}
                    onChange={(e) => updateForm("activity_level", e.target.value)}
                    className="w-full px-3 py-2 border border-slate-200 rounded-md"
                  >
                    <option value="">Select activity level</option>
                    <option value="sedentary">Sedentary (little or no exercise)</option>
                    <option value="lightly_active">Lightly Active (1-3 days/week)</option>
                    <option value="moderately_active">Moderately Active (3-5 days/week)</option>
                    <option value="very_active">Very Active (6-7 days/week)</option>
                    <option value="extremely_active">Extremely Active (intense daily)</option>
                  </select>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="sleep">Average Sleep Hours *</Label>
                    <Input
                      id="sleep"
                      type="number"
                      step="0.5"
                      placeholder="e.g., 7.5"
                      value={formData.sleep_hours_avg}
                      onChange={(e) => updateForm("sleep_hours_avg", e.target.value)}
                      className="border-slate-200"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="stress">Stress Level *</Label>
                    <select
                      id="stress"
                      value={formData.stress_level}
                      onChange={(e) => updateForm("stress_level", e.target.value)}
                      className="w-full px-3 py-2 border border-slate-200 rounded-md"
                    >
                      <option value="">Select stress level</option>
                      <option value="low">Low</option>
                      <option value="moderate">Moderate</option>
                      <option value="high">High</option>
                      <option value="very_high">Very High</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {step === 4 && (
              <div className="space-y-6">
                <div className="space-y-4">
                  <Label className="text-lg">Dietary Preferences</Label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {["Vegetarian", "Vegan", "Pescatarian", "Keto", "Paleo", "Mediterranean", "Low-Carb", "Low-Fat"].map((pref) => (
                      <div key={pref} className="flex items-center space-x-2">
                        <Checkbox
                          id={`pref_${pref}`}
                          checked={formData.dietary_preferences.includes(pref)}
                          onCheckedChange={() => toggleArrayItem("dietary_preferences", pref)}
                        />
                        <label htmlFor={`pref_${pref}`} className="text-sm font-medium">
                          {pref}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-4">
                  <Label className="text-lg">Dietary Restrictions</Label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {["Dairy-Free", "Gluten-Free", "Nut-Free", "Soy-Free", "Shellfish-Free", "Egg-Free"].map((restriction) => (
                      <div key={restriction} className="flex items-center space-x-2">
                        <Checkbox
                          id={`restriction_${restriction}`}
                          checked={formData.dietary_restrictions.includes(restriction)}
                          onCheckedChange={() => toggleArrayItem("dietary_restrictions", restriction)}
                        />
                        <label htmlFor={`restriction_${restriction}`} className="text-sm font-medium">
                          {restriction}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-gradient-to-br from-cyan-50 to-teal-50 p-6 rounded-xl border border-cyan-100">
                  <p className="text-sm text-slate-700">
                    ✨ <strong>Almost done!</strong> We'll use this information to create your personalized health plan and calculate your baseline health score.
                  </p>
                </div>
              </div>
            )}

            <div className="flex justify-between mt-8 pt-6 border-t border-slate-100">
              {step > 1 && (
                <Button
                  variant="outline"
                  onClick={() => setStep(step - 1)}
                  disabled={loading}
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Previous
                </Button>
              )}
              {step < totalSteps ? (
                <Button
                  onClick={() => setStep(step + 1)}
                  className="ml-auto bg-gradient-to-r from-cyan-500 to-teal-600 hover:from-cyan-600 hover:to-teal-700"
                  disabled={
                    (step === 1 && (!formData.age || !formData.gender || !formData.height_inches || !formData.current_weight_lbs || !formData.target_weight_lbs)) ||
                    (step === 3 && (!formData.activity_level || !formData.sleep_hours_avg || !formData.stress_level))
                  }
                >
                  Next
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              ) : (
                <Button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="ml-auto bg-gradient-to-r from-cyan-500 to-teal-600 hover:from-cyan-600 hover:to-teal-700"
                >
                  {loading ? "Creating Profile..." : "Complete Assessment"}
                  {!loading && <ArrowRight className="w-4 h-4 ml-2" />}
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
 
